function [uNext] = solveWaveEqnEE(u,uNext,uPrev,dims,c,source,sPos,t)
 
 dtSq= dims.dt*dims.dt;  % delta time squared (t=1ms)       time dimension
 dxSq=dtSq/(dims.dx*dims.dx); % grid size (dx=dy=10m) h     x dimension
 dySq=dtSq/(dims.dy*dims.dy);  % grid size(dy=dx=10m) h     z dimension
 cSq=c.*c;

 
 u(sPos) = u(sPos) + source(t,:); % injecting source
 
 
  [yj,xi] = size(u);
  
 % slicing
 % Assuming first and last 4 rows as zero 
 %The length of FDO is increased because of more stability
yj=5:yj-4 ;
xi=5:xi-4 ;

 
% solving discretized wave equation 
uNext(yj,xi) = dxSq * cSq(yj,xi).*(...
    (-9/5040)*(u(yj , xi-4) + u(yj , xi+4))+...
    (+ 128/5040)*(u(yj , xi-3) + u(yj , xi+3))+...
    (- 1008/5040)*(u(yj , xi-2) + u(yj , xi+2))+...
    (+ 8/5)*(u(yj , xi-1) + u(yj , xi+1))+...
    (- 14350/5040)*(u(yj , xi))) +...
    dySq * cSq(yj,xi).*(...
    (-9/5040)*(u(yj-4 , xi) + u(yj+4 , xi))+...
    (+ 128/5040)*(u(yj-3 , xi) + u(yj+3 , xi))+...
    (- 1008/5040)*(u(yj-2 , xi) + u(yj+2 , xi))+...
    (+ 8064/5040)*(u(yj-1 , xi) + u(yj+1 , xi))+...
    (- 14350/5040)*(u(yj , xi))) +...
    +2*u(yj , xi)-uPrev(yj , xi);
end

